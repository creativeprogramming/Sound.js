// Generated by CoffeeScript 1.3.3
(function() {
  var presets, storage;

  storage = {};

  presets = {
    compressor: {
      "default": {
        ratio: 12,
        threshold: -24,
        attack: .003,
        release: .025,
        knee: 30
      },
      mild: {
        ratio: 3,
        threshold: -18,
        attack: .003,
        release: .025,
        knee: 26
      },
      heavy: {
        ratio: 10,
        threshold: -24,
        attack: .008,
        release: .015,
        knee: 20
      },
      off: {
        ratio: 1,
        threshold: 0
      }
    }
  };

  window.Sound = (function() {

    function Sound(url) {
      var data, guid,
        _this = this;
      data = {};
      guid = Date.now() + '_' + Math.floor(Math.random() * 0xFFFFFFFF).toString(16);
      this.__defineGetter__('_guid', function() {
        return guid;
      });
      data.events = {};
      data.url = url;
      data.context = new webkitAudioContext();
      data.compressorNode = data.context.createDynamicsCompressor();
      data.panner = data.context.createPanner();
      data.panner.panningModel = webkitAudioPannerNode.EQUALPOWER;
      data.panner.setPosition(0, 0, .1);
      data.gainNode = data.context.createGainNode();
      data.volumeNode = data.context.createGainNode();
      data.analyser = data.context.createAnalyser();
      data.analyser.smoothingTimeConstant = 0.5;
      data.analyser.fftSize = 128;
      data.processor = data.context.createJavaScriptNode(2048, 1, 1);
      data.freqByteData = new Uint8Array(data.analyser.frequencyBinCount);
      data.element = document.createElement('audio');
      data.convolvers = {};
      data.ready = false;
      data.volume = 1;
      data.element.src = data.url;
      data.initCompressor = false;
      data.element.addEventListener('canplaythrough', function() {
        return _this.connect();
      }, false);
      data.processor.onaudioprocess = function() {
        _this.gainMeter();
        return _this.compressionMeter();
      };
      storage[guid] = data;
    }

    Sound.prototype.set = function(prop, val) {
      if (!(prop != null)) {
        return this;
      }
      storage[this._guid][prop] = val;
      return this;
    };

    Sound.prototype.get = function(prop) {
      return storage[this._guid][prop];
    };

    Sound.prototype.on = function(evt, func) {
      this.get('events')[evt] = this.get('events')[evt] || [];
      this.get('events')[evt].push(func);
      return this;
    };

    Sound.prototype.off = function(evt, func) {
      var arr, fn, _i, _len, _ref;
      if (func != null) {
        _ref = this.get('events')[evt];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fn = _ref[_i];
          if (fn !== func) {
            arr.push(fn);
          }
        }
      } else {
        arr = [];
      }
      this.get('events')[evt] = arr;
      return this;
    };

    Sound.prototype.trigger = function(evt) {
      var args, callback, _i, _len, _ref;
      args = Array.prototype.slice.call(arguments, 1);
      if (!(this.get('events')[evt] != null)) {
        return this;
      }
      _ref = this.get('events')[evt];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.apply(this, args);
      }
      return this;
    };

    Sound.prototype.ready = function(func) {
      var args,
        _this = this;
      args = Array.prototype.slice.call(arguments, 1);
      if (this.get('ready')) {
        func.call(this, args);
      } else {
        this.on('ready', function() {
          return func.call(_this, args);
        });
      }
      return this;
    };

    Sound.prototype.connect = function() {
      this.set('source', this.get('context').createMediaElementSource(this.get('element')));
      this.get('source').connect(this.get('compressorNode'));
      this.get('compressorNode').connect(this.get('panner'));
      this.get('panner').connect(this.get('gainNode'));
      this.get('gainNode').connect(this.get('volumeNode'));
      this.get('volumeNode').connect(this.get('context').destination);
      this.get('gainNode').connect(this.get('analyser'));
      this.get('analyser').connect(this.get('processor'));
      this.get('processor').connect(this.get('context').destination);
      if (!this.get('initCompressor')) {
        this.compressor('off');
      }
      this.set('ready', true);
      return this.trigger('ready');
    };

    Sound.prototype.play = function() {
      var _this = this;
      if (!this.get('ready')) {
        this.ready(function() {
          return _this.play();
        });
        return this;
      }
      this.get('element').play();
      this.set('playing', true);
      return this.trigger('play');
    };

    Sound.prototype.pause = function() {
      this.get('element').pause();
      this.set('playing', false);
      return this.trigger('pause');
    };

    Sound.prototype.toggle = function() {
      return this[this.get('playing') ? 'pause' : 'play']();
    };

    Sound.prototype.position = function(time) {
      if (!(time != null)) {
        return this.get('element').currentTime;
      }
      this.get('element').currentTime = time;
      return this.trigger('seek', time);
    };

    Sound.prototype.volume = function(volume) {
      if (!(volume != null)) {
        return this.get('volume');
      }
      volume = volume > 1.5 ? 1.5 : volume < 0 ? 0 : volume;
      this.get('volumeNode').gain.value = volume;
      this.set('volume', volume);
      return this.trigger('volume');
    };

    Sound.prototype.animate = function(func, duration, callback) {
      var looper, reqAnimFrame, times;
      times = [Date.now()];
      reqAnimFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.webkitRequestAnimationFrame;
      looper = function() {
        var i, time;
        i = times.length;
        times[i] = Date.now();
        time = times[i] - times[0];
        if (time < duration && !!func.call(times, time, i)) {
          return reqAnimFrame(looper);
        } else {
          return callback.call(this);
        }
      };
      reqAnimFrame(looper);
      return this;
    };

    Sound.prototype.fade = function(start, end, duration, callback) {
      var _this = this;
      this.animate(function(elapsed) {
        var progress;
        progress = elapsed / duration;
        return _this.volume(start + (end - start) * progress);
      }, duration, function() {
        _this.volume(end);
        if (typeof callback === 'function') {
          return callback.call(_this);
        }
      });
      return this;
    };

    Sound.prototype.fadeTo = function(end, duration, callback) {
      return this.fade(this.volume(), end, duration, callback);
    };

    Sound.prototype.fadeOut = function(duration, callback) {
      return this.fadeTo(0, duration, callback);
    };

    Sound.prototype.tremolo = function(speed, intensity) {
      var _this = this;
      if (this.get('currentTremolo') != null) {
        this.get('currentTremolo').kill();
      }
      if (!speed) {
        return this;
      }
      speed = speed / 2;
      intensity = intensity != null ? .5 : intensity;
      this.set('currentTremolo', {
        down: function() {
          return _this.animate(function(elapsed) {
            var progress;
            progress = elapsed / speed;
            return _this.get('gainNode').gain.value = 1 - (intensity * progress);
          }, speed, function() {
            _this.get('gainNode').gain.value = 1 - intensity;
            return _this.get('currentTremolo').up();
          });
        },
        up: function() {
          return _this.animate(function(elapsed) {
            var progress;
            progress = elapsed / speed;
            return _this.get('gainNode').gain.value = 1 - (intensity * (1 - progress));
          }, speed, function() {
            _this.get('gainNode').gain.value = 1;
            return _this.get('currentTremolo').down();
          });
        },
        kill: function() {
          _this.get('currentTremolo').down = function() {};
          return _this.up();
        }
      });
      this.get('currentTremolo').down();
      return this;
    };

    Sound.prototype.compressor = function(param, val) {
      var key, value;
      if (!(param != null)) {
        return this;
      }
      if (!(val != null) && typeof param === 'string' && param !== 'reduction') {
        param = presets.compressor[param] || void 0;
      }
      if (typeof param === 'object') {
        for (key in param) {
          value = param[key];
          this.compressor(key, value);
        }
      }
      switch (param) {
        case 'attack':
          if (!(val != null)) {
            return this.get('compressorNode').attack.value;
          }
          this.get('compressorNode').attack.value = val;
          break;
        case 'release':
          if (!(val != null)) {
            return this.get('compressorNode').release.value;
          }
          this.get('compressorNode').release.value = val;
          break;
        case 'threshold':
          if (!(val != null)) {
            return this.get('compressorNode').threshold.value;
          }
          this.get('compressorNode').threshold.value = val;
          break;
        case 'ratio':
          if (!(val != null)) {
            return this.get('compressorNode').ratio.value;
          }
          this.get('compressorNode').ratio.value = val;
          break;
        case 'knee':
          if (!(val != null)) {
            return this.get('compressorNode').knee.value;
          }
          this.get('compressorNode').knee.value = val;
          break;
        case 'reduction':
          return this.get('compressorNode').reduction.value;
      }
      if (!this.get('initCompressor')) {
        this.set('initCompressor', true);
      }
      return this;
    };

    Sound.prototype.addConvolver = function(name, url, gain, callback) {
      var request,
        _this = this;
      request = new XMLHttpRequest();
      if (this.get('convolvers')[name] != null) {
        return this;
      }
      callback = callback ? callback : typeof gain === 'function' ? gain : void 0;
      gain = typeof gain !== 'function' ? gain : void 0;
      this.get('convolvers')[name] = {};
      this.get('convolvers')[name].gainNode = this.get('context').createGainNode();
      this.get('convolvers')[name].gainNode.connect(this.get('context').destination);
      this.get('convolvers')[name].convolver = this.get('context').createConvolver();
      this.get('convolvers')[name].convolver.connect(this.get('convolvers')[name].gainNode);
      this.get('convolvers')[name].gain = function(gain) {
        if (!(gain != null)) {
          return this.gainNode.gain.value;
        }
        gain = gain > 1 ? 1 : gain < 0 ? 0 : gain;
        return this.gainNode.gain.value = gain;
      };
      this.get('convolvers')[name].gain(gain || 0);
      request.open('GET', url, true);
      request.responseType = 'arraybuffer';
      request.addEventListener('load', function() {
        return _this.get('context').decodeAudioData(request.response, function(buffer) {
          var connect;
          connect = function() {
            _this.get('volumeNode').connect(_this.get('convolvers')[name].convolver);
            _this.get('convolvers')[name].convolver.buffer = buffer;
            _this.get('convolvers')[name].ready = true;
            _this.trigger('fxLoaded', name);
            if (typeof callback === 'function') {
              return callback.call(_this);
            }
          };
          if (_this.get('ready')) {
            return connect();
          } else {
            return _this.on('ready', connect);
          }
        });
      }, false);
      request.send();
      return this;
    };

    Sound.prototype.convolverGain = function(name, gain) {
      if (this.get('convolvers')[name] != null) {
        this.get('convolvers')[name].gain(this.get('convolvers')[name], gain);
      }
      return this;
    };

    Sound.prototype.compressionMeter = function() {
      return this.trigger('compression', this.compressor('reduction'));
    };

    Sound.prototype.gainMeter = function() {
      var average, length, val, values, _i, _len, _ref;
      values = 0;
      length = this.get('freqByteData').length;
      this.get('analyser').getByteFrequencyData(this.get('freqByteData'));
      _ref = this.get('freqByteData');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        values += val;
      }
      average = (values / length) * this.volume();
      return this.trigger('averagevolume', average);
    };

    return Sound;

  })();

}).call(this);
